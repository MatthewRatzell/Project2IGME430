(()=>{var e={603:e=>{const t=e=>{console.log(`${e}`),document.getElementById("errorMessage").textContent=e,document.getElementById("taskMessage").classList.remove("hidden")};e.exports={handleError:t,sendPost:async(e,a,r)=>{const n=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),o=await n.json();document.getElementById("taskMessage").classList.add("hidden"),o.error&&t(o.error),o.redirect&&(window.location=o.redirect),r&&r(o)},hideError:()=>{document.getElementById("taskMessage").classList.add("hidden")},makeid:function(){for(var e="",t="abcdefghijklmnopqrstuvwxyz",a=0;a<12;a++)e+=t.charAt(Math.floor(Math.random()*t.length));return e}}}},t={};function a(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,a),o.exports}(()=>{const e=a(603),t=t=>{t.preventDefault(),e.hideError();const a=t.target.querySelector("#taskTitle").value,r=t.target.querySelector("#taskDescription").value,n=t.target.querySelector("#taskDueDate").value,c=t.target.querySelector("#_csrf").value;return a&&r&&n?(e.sendPost(t.target.action,{title:a,description:r,currentSpot:"toDo",dueDate:n,_csrf:c},o),!1):(e.handleError("All fields are required!"),!1)},r=e=>React.createElement("form",{id:"taskForm",name:"taskForm",onSubmit:t,action:"/taskBoard",method:"POST",className:"taskForm"},React.createElement("label",{htmlFor:"title"}," Title: "),React.createElement("input",{id:"taskTitle",type:"text",name:"title",placeholder:"task title"}),React.createElement("label",{htmlFor:"description"},"Description: "),React.createElement("input",{id:"taskDescription",type:"text",name:"title",placeholder:"task description"}),React.createElement("label",{htmlFor:"cardDueDate"},"Due Date:"),React.createElement("input",{id:"taskDueDate",type:"datetime-local",name:"cardDueDate"}),React.createElement("input",{className:"makeTaskSubmit",type:"submit",value:"Make task"}),React.createElement("input",{id:"_csrf",type:"hidden",name:"_csrf",value:e.csrf})),n=e=>React.createElement("div",{className:"card"},React.createElement("div",{className:"topOfCard"},React.createElement("h2",null,e.task.title)),React.createElement("div",{className:"middleOfCard"},React.createElement("h2",null,e.task.description)),React.createElement("div",{className:"bottomOfCard"},React.createElement("h2",null,e.task.dueDate))),o=async()=>{const t=await fetch("/getTasks");(t=>{const a=document.getElementById("toDo"),r=document.getElementById("inProgress"),o=document.getElementById("done"),c=document.getElementById("burnerDivHome");if(a.innerHTML="<strong>To Do</strong>",r.innerHTML="<strong>In Progress</strong>",o.innerHTML="<strong>Done</strong>",0===t.length)return React.createElement("div",{className:"taskList"},React.createElement("h3",{className:"emptytask"},"No tasks yet!"));for(let s=0;s<t.length;s++)document.getElementById("burnerDivCopy").id="burnerDiv",ReactDOM.render(React.createElement(n,{task:t[s]}),document.getElementById("burnerDiv")),"toDo"==t[s].currentSpot?a.append(document.getElementById("burnerDiv")):"inProgress"==t[s].currentSpot?r.append(document.getElementById("burnerDiv")):"done"==t[s].currentSpot&&o.append(document.getElementById("burnerDiv")),document.getElementById("burnerDiv").id=e.makeid(),c.append(document.getElementById("burnerDivCopy").cloneNode(!0))})((await t.json()).tasks)};window.onload=async()=>{const e=await fetch("/getToken"),t=await e.json();ReactDOM.render(React.createElement(r,{csrf:t.csrfToken}),document.getElementById("makeTask")),o()}})()})();