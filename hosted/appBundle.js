(()=>{var e={603:e=>{const t=e=>{console.log(`${e}`),document.getElementById("errorMessage").textContent=e,document.getElementById("taskMessage").classList.remove("hidden")};e.exports={handleError:t,sendPost:async(e,a,r)=>{const n=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),c=await n.json();document.getElementById("taskMessage").classList.add("hidden"),c.error&&t(c.error),c.redirect&&(window.location=c.redirect),r&&r(c)},hideError:()=>{document.getElementById("taskMessage").classList.add("hidden")},drag:function(e){e.dataTransfer.setData("text",e.target.id)},allowDrop:function(e){e.preventDefault()},drop:function(e){if(e.preventDefault(),"clonedDiv"!==e.target.className&&"card"!==e.target.className){var t=e.dataTransfer.getData("text");e.target.appendChild(document.getElementById(t))}}}}},t={};function a(r){var n=t[r];if(void 0!==n)return n.exports;var c=t[r]={exports:{}};return e[r](c,c.exports,a),c.exports}(()=>{const e=a(603),t=t=>{t.preventDefault(),e.hideError();const a=t.target.querySelector("#taskTitle").value,r=t.target.querySelector("#taskDescription").value,n=t.target.querySelector("#taskDueDate").value,s=t.target.querySelector("#_csrf").value;return a&&r&&n?(e.sendPost(t.target.action,{title:a,description:r,dueDate:n,_csrf:s},c),!1):(e.handleError("All fields are required!"),!1)},r=e=>React.createElement("form",{id:"taskForm",name:"taskForm",onSubmit:t,action:"/taskBoard",method:"POST",className:"taskForm"},React.createElement("label",{htmlFor:"title"}," Title: "),React.createElement("input",{id:"taskTitle",type:"text",name:"title",placeholder:"task title"}),React.createElement("label",{htmlFor:"description"},"Description: "),React.createElement("input",{id:"taskDescription",type:"text",name:"title",placeholder:"task description"}),React.createElement("label",{htmlFor:"cardDueDate"},"Due Date:"),React.createElement("input",{id:"taskDueDate",type:"datetime-local",name:"cardDueDate"}),React.createElement("input",{className:"makeTaskSubmit",type:"submit",value:"Make task"}),React.createElement("input",{id:"_csrf",type:"hidden",name:"_csrf",value:e.csrf})),n=e=>React.createElement("div",{className:"card"},React.createElement("div",{className:"topOfCard"},React.createElement("h2",null,e.task.title)),React.createElement("div",{className:"middleOfCard"},React.createElement("h2",null,e.task.description)),React.createElement("div",{className:"bottomOfCard"},React.createElement("h2",null,e.task.dueDate))),c=async()=>{const e=await fetch("/getTasks");(e=>{const t=document.getElementById("toDo"),a=(document.getElementById("inProgress"),document.getElementById("done"),document.getElementById("burnerDivHome"));if(0===e.length)return React.createElement("div",{className:"taskList"},React.createElement("h3",{className:"emptytask"},"No tasks yet!"));for(let r=0;r<e.length;r++)document.getElementById("burnerDivCopy").id="burnerDiv",ReactDOM.render(React.createElement(n,{task:e[r]}),document.getElementById("burnerDiv")),t.append(document.getElementById("burnerDiv")),document.getElementById("burnerDiv").id="abcdefg",a.append(document.getElementById("burnerDivCopy").cloneNode(!0))})((await e.json()).tasks)};window.onload=async()=>{const e=await fetch("/getToken"),t=await e.json();ReactDOM.render(React.createElement(r,{csrf:t.csrfToken}),document.getElementById("makeTask")),c()}})()})();